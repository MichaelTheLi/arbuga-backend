package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"arbuga/backend/api/converters/input"
	"arbuga/backend/api/converters/output"
	"arbuga/backend/api/graph/model"
	"arbuga/backend/app"
	"context"
	"errors"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, login string, password string) (*model.LoginResult, error) {
	serviceLoginResult, err := r.SignInService.Login(login, password)

	if serviceLoginResult == nil || err != nil {
		// TODO Bad error handling
		if err.Error() == "unknown user" {
			serviceSignupResult, signUpErr := r.SignUpService.SignUp(login, password, login)
			if serviceSignupResult == nil || signUpErr != nil {
				return nil, errors.New("error: " + err.Error())
			}

			serviceLoginResult, err = r.SignInService.Login(login, password)
		} else {
			return nil, errors.New("error: " + err.Error())
		}
	}

	user := output.ConvertUser(serviceLoginResult.User)

	return &model.LoginResult{
		User:  user,
		Token: &serviceLoginResult.Token,
	}, nil
}

// SaveEcosystem is the resolver for the saveEcosystem field.
func (r *mutationResolver) SaveEcosystem(ctx context.Context, id *string, ecosystem model.EcosystemInput) (*model.EcosystemUpdateResult, error) {
	user := ForContext(ctx)

	if user == nil {
		return nil, errors.New("not authenticated")
	}

	appInput := input.ConvertEcosystemInput(ecosystem)
	var domainRes *app.EcosystemUpdateResult
	if id != nil {
		domainRes = r.UserService.UpdateEcosystem(user, *id, &appInput)
	} else {
		domainRes = r.UserService.SaveEcosystem(user, &appInput)
	}

	var result *model.EcosystemUpdateResult

	if domainRes.Success == false {
		result = &model.EcosystemUpdateResult{
			Ecosystem: nil,
			Success:   false,
			Error:     domainRes.Error,
		}
	} else {
		result = &model.EcosystemUpdateResult{
			Ecosystem: output.ConvertEcosystem(domainRes.Ecosystem),
			Success:   domainRes.Success,
			Error:     domainRes.Error,
		}
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
