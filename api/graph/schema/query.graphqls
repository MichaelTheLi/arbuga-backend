type Query {
  me: User
  fishList(substring: String, first: Int = 20, after: ID): FishListConnection!
  fish(id: ID!): Fish
}

type FishListConnection {
  edges: [FishListEdge!]!
  pageInfo: PageInfo!
}

type FishListEdge {
  cursor: ID!
  node: Fish
}

type Fish {
  id: ID!
  name: String!
  description: String!
}

type User {
  id: ID!
  login: String
  name: String!
  ecosystems: [Ecosystem!]
}

type Ecosystem {
  id: ID!
  name: String!
  aquarium: AquariumGlass!
  analysis: [EcosystemAnalysisCategory!]
  fish: [Fish!]
}

type EcosystemAnalysisCategory {
  id: ID!
  name: String!
  description: String!
  status: AnalysisStatus!
  messages: [EcosystemAnalysisMessage!]!
}

enum AnalysisStatus {
  ok
  moderate
  bad
}

type EcosystemAnalysisMessage {
  id: ID!
  name: String!
  description: String!
  status: AnalysisStatus!
}

type AquariumGlass {
  dimensions: Dimensions!
  glassThickness: Int!
  substrateThickness: Int
  decorationsVolume: Int
}

type Dimensions {
  width: Int!
  height: Int!
  length: Int!
}

type PageInfo {
  startCursor: ID!
  endCursor: ID!
  hasNextPage: Boolean
}
