// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AquariumGlass struct {
	Dimensions         *Dimensions `json:"dimensions"`
	GlassThickness     int         `json:"glassThickness"`
	SubstrateThickness *int        `json:"substrateThickness"`
	DecorationsVolume  *int        `json:"decorationsVolume"`
}

type Dimensions struct {
	Width  int `json:"width"`
	Height int `json:"height"`
	Length int `json:"length"`
}

type Ecosystem struct {
	ID       string                       `json:"id"`
	Name     string                       `json:"name"`
	Aquarium *AquariumGlass               `json:"aquarium"`
	Analysis []*EcosystemAnalysisCategory `json:"analysis"`
}

type EcosystemAnalysisCategory struct {
	ID          string                      `json:"id"`
	Name        string                      `json:"name"`
	Description string                      `json:"description"`
	Status      AnalysisStatus              `json:"status"`
	Messages    []*EcosystemAnalysisMessage `json:"messages"`
}

type EcosystemAnalysisMessage struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Status      AnalysisStatus `json:"status"`
}

type LoginResult struct {
	User  *User   `json:"user"`
	Token *string `json:"token"`
}

type AnalysisStatus string

const (
	AnalysisStatusOk       AnalysisStatus = "ok"
	AnalysisStatusModerate AnalysisStatus = "moderate"
	AnalysisStatusBad      AnalysisStatus = "bad"
)

var AllAnalysisStatus = []AnalysisStatus{
	AnalysisStatusOk,
	AnalysisStatusModerate,
	AnalysisStatusBad,
}

func (e AnalysisStatus) IsValid() bool {
	switch e {
	case AnalysisStatusOk, AnalysisStatusModerate, AnalysisStatusBad:
		return true
	}
	return false
}

func (e AnalysisStatus) String() string {
	return string(e)
}

func (e *AnalysisStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnalysisStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnalysisStatus", str)
	}
	return nil
}

func (e AnalysisStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
