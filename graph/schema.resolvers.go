package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"arbuga/backend/auth"
	"arbuga/backend/graph/model"
	"context"
	"crypto/rand"
	"errors"
	"fmt"
	"log"
	"math/big"

	"golang.org/x/crypto/bcrypt"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, login string, password string) (*model.LoginResult, error) {
	randValue, _ := rand.Int(rand.Reader, big.NewInt(100))

	user, _ := r.UsersState.GetUserByLogin(login)

	if user == nil {
		// hash and salt the password
		hashedPass, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.MinCost)
		hashedPassString := string(hashedPass)

		if err != nil {
			return nil, err
		}
		user = &model.User{
			ID:         fmt.Sprintf("T%d", randValue),
			Name:       "Michael" + fmt.Sprintf("T%d", randValue),
			Login:      &login,
			Password:   &hashedPassString,
			Ecosystems: []*model.Ecosystem{},
		}
		r.UsersState.Users[user.ID] = user
		log.Println(r.UsersState.Users)
	} else {
		err := bcrypt.CompareHashAndPassword([]byte(*user.Password), []byte(password))
		if err != nil {
			return nil, errors.New("error")
		}
	}

	token, err := auth.GenerateToken(user)
	if err != nil {
		return nil, err
	}

	return &model.LoginResult{User: user, Token: &token}, nil
}

// SaveEcosystem is the resolver for the saveEcosystem field.
func (r *mutationResolver) SaveEcosystem(ctx context.Context, id string, ecosystem model.EcosystemInput) (*model.EcosystemUpdateResult, error) {
	var result = model.EcosystemUpdateResult{
		Success:   true,
		Error:     nil,
		Ecosystem: nil,
	}

	// TODO Implement real save
	return &result, nil
	//panic(fmt.Errorf("not implemented: SaveEcosystem - saveEcosystem"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return nil, errors.New("not authenticated")
	}

	return r.UsersState.GetUserByID(user.ID)
}

// PublicEcosystems is the resolver for the publicEcosystems field.
func (r *queryResolver) PublicEcosystems(ctx context.Context) ([]*model.Ecosystem, error) {
	panic(fmt.Errorf("not implemented: PublicEcosystems - publicEcosystems"))
}

// PublicEcosystem is the resolver for the publicEcosystem field.
func (r *queryResolver) PublicEcosystem(ctx context.Context, id string) (*model.Ecosystem, error) {
	panic(fmt.Errorf("not implemented: PublicEcosystem - publicEcosystem"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
